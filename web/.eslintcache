[{"D:\\GitHub\\ta-marcado\\web\\src\\index.js":"1","D:\\GitHub\\ta-marcado\\web\\src\\routes\\index.js":"2","D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\index.js":"3","D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\index.js":"4","D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\index.js":"5","D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\index.js":"6","D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\index.js":"7","D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\styles.js":"8","D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\styles.js":"9","D:\\GitHub\\ta-marcado\\web\\src\\services\\api.js":"10","D:\\GitHub\\ta-marcado\\web\\src\\utils\\typeIcons.js":"11","D:\\GitHub\\ta-marcado\\web\\src\\utils\\isConnected.js":"12","D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\styles.js":"13","D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\styles.js":"14","D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\styles.js":"15","D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\index.js":"16","D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\index.js":"17","D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\index.js":"18","D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\index.js":"19","D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\styles.js":"20","D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\styles.js":"21","D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\styles.js":"22","D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\styles.js":"23"},{"size":218,"mtime":1610039093146,"results":"24","hashOfConfig":"25"},{"size":876,"mtime":1620866834068,"results":"26","hashOfConfig":"25"},{"size":4362,"mtime":1620175086206,"results":"27","hashOfConfig":"25"},{"size":2409,"mtime":1621048519289,"results":"28","hashOfConfig":"25"},{"size":2052,"mtime":1619142603805,"results":"29","hashOfConfig":"25"},{"size":2894,"mtime":1619481501880,"results":"30","hashOfConfig":"25"},{"size":8102,"mtime":1621297678968,"results":"31","hashOfConfig":"25"},{"size":1004,"mtime":1617543128029,"results":"32","hashOfConfig":"25"},{"size":2623,"mtime":1617544762914,"results":"33","hashOfConfig":"25"},{"size":121,"mtime":1610039093146,"results":"34","hashOfConfig":"25"},{"size":640,"mtime":1610039093146,"results":"35","hashOfConfig":"25"},{"size":93,"mtime":1618796217865,"results":"36","hashOfConfig":"25"},{"size":1594,"mtime":1619143080153,"results":"37","hashOfConfig":"25"},{"size":1749,"mtime":1619142629960,"results":"38","hashOfConfig":"25"},{"size":3777,"mtime":1621297990981,"results":"39","hashOfConfig":"25"},{"size":223,"mtime":1617545239629,"results":"40","hashOfConfig":"25"},{"size":403,"mtime":1617544546948,"results":"41","hashOfConfig":"25"},{"size":687,"mtime":1610039093146,"results":"42","hashOfConfig":"25"},{"size":1559,"mtime":1621186771116,"results":"43","hashOfConfig":"25"},{"size":612,"mtime":1617544554492,"results":"44","hashOfConfig":"25"},{"size":370,"mtime":1618792340221,"results":"45","hashOfConfig":"25"},{"size":873,"mtime":1617544267047,"results":"46","hashOfConfig":"25"},{"size":1558,"mtime":1620869398887,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1bpsrbb",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\GitHub\\ta-marcado\\web\\src\\index.js",[],["102","103"],"D:\\GitHub\\ta-marcado\\web\\src\\routes\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\index.js",["104"],"import React, { useState, useEffect} from 'react';\r\nimport api from '../../services/api';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport TypeIcons from '../../utils/typeIcons';\r\nimport {format} from 'date-fns';\r\nimport {Redirect} from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\nimport * as S from './styles';\r\n\r\nfunction Task({match}) {\r\n  const [redirect, setRedirect] = useState(false)\r\n  const [type, setType] = useState();\r\n  const [title, setTitle] = useState();\r\n  const [done, setDone] = useState(false);\r\n  const [description, setDescription] = useState();\r\n  const [date, setDate] = useState();\r\n  const [hour, setHour] = useState();\r\n\r\n\r\n\r\n  async function loadTaskDetails(){\r\n    await api.get(`/task/${match.params.id}`)\r\n    .then(response => {\r\n      setType(response.data.type)\r\n      setDone(response.data.done)\r\n      setTitle(response.data.title)\r\n      setDescription(response.data.description)\r\n      setDate(format (new Date (response.data.when), 'yyyy-MM-dd'))\r\n      setHour(format (new Date (response.data.when), 'HH:mm'))\r\n    })\r\n  }\r\n\r\n  async function save(){\r\n    //Validação\r\n    if (!title)\r\n      return alert(\"Informe o título da tarefa\")\r\n    else if(!description)\r\n      return alert(\"Informe a descrição da tarefa\")\r\n    else if(!type)\r\n      return alert(\"Informe o tipo da tarefa\")\r\n    else if(!date)\r\n      return alert(\"Informe a data da tarefa\")\r\n    else if(!hour)\r\n      return alert(\"Informe a hora da tarefa\")\r\n\r\n\r\n\r\n    if(match.params.id){\r\n      await api.put(`/task/${match.params.id}`, {\r\n        userid: isConnected,\r\n        done,\r\n        type,\r\n        title,\r\n        description,\r\n        when: `${date}T${hour}:00.000`\r\n      })\r\n      .then( () =>\r\n        setRedirect(true)\r\n        )\r\n    } else {\r\n    await api.post('/task', {\r\n      userid: isConnected,\r\n      type,\r\n      title,\r\n      description,\r\n      when: `${date}T${hour}:00.000`\r\n    })\r\n    .then( () =>\r\n      setRedirect(true)\r\n      )\r\n    }\r\n  }\r\n\r\n    async function remove() {\r\n      const res = window.confirm(\"Deseja remover a tarefa?\")\r\n      if( res === true){\r\n        await api.delete(`/task/${match.params.id}`)\r\n        .then(() =>\r\n        setRedirect(true))\r\n      }\r\n    }\r\n\r\n  useEffect( () => {\r\n    if(!isConnected)\r\n    setRedirect(true);\r\n    loadTaskDetails();\r\n  }, [])\r\n\r\n\r\n  return (\r\n      <S.Container>\r\n        {redirect && <Redirect to=\"/\" />}\r\n      <Header />\r\n\r\n      <S.Form>\r\n          <S.TypeIcons>\r\n            {\r\n                TypeIcons.map((icon, index) => (\r\n                    index > 0 && \r\n                    <button type=\"button\" onClick={()=> setType(index)}>\r\n                    <img src={icon} alt=\" Tipo da Tarefa\"\r\n                    className={type && type !== index && 'inative'}/>\r\n                    </button>\r\n                ))\r\n            }\r\n          </S.TypeIcons>\r\n          <S.Input>\r\n              <span>Título</span>\r\n              <input type=\"text\" placeholder=\"Título da tarefa\" \r\n              onChange={e => setTitle(e.target.value)} value={title}/>\r\n          </S.Input>\r\n\r\n          <S.TextArea>\r\n              <span>Descrição</span>\r\n              <textarea rows={5} placeholder=\"Detalhes da tarefa\"\r\n              onChange={e => setDescription(e.target.value)} value={description}/>\r\n              \r\n          </S.TextArea>\r\n\r\n          <S.Input>\r\n              <span>Data</span>\r\n              <input type=\"date\" placeholder=\"Data\"\r\n              onChange={e => setDate(e.target.value)} value={date}/>\r\n              \r\n          </S.Input>\r\n\r\n          <S.Input>\r\n              <span>Hora</span>\r\n              <input type=\"time\" placeholder=\"Hora\"\r\n              onChange={e => setHour(e.target.value)} value={hour}/>\r\n          </S.Input>\r\n\r\n          <S.Options>\r\n              <div>\r\n                <input type=\"checkbox\" checked={done} onChange={() => setDone(!done)}/>\r\n                <span>CONCLUÍDO</span>\r\n              </div>\r\n\r\n              {match.params.id && <button type=\"button\" onClick={remove}>EXCLUIR</button>}\r\n          </S.Options>\r\n\r\n          <S.Save>\r\n              <button type='button' onClick={save}  >SALVAR</button>\r\n          </S.Save>\r\n      </S.Form>\r\n\r\n      <Footer />\r\n      </S.Container>\r\n    );\r\n}\r\n\r\nexport default Task;","D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\index.js",["105"],"import React, { useState, useEffect} from 'react';\r\nimport api from '../../services/api';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport FilterCard from '../../components/FilterCard';\r\nimport TaskCard from '../../components/TaskCard';\r\nimport * as S from './styles';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\n\r\nfunction Home() {\r\n  const [filterActived, setFilterActived] = useState('today');\r\n  const [tasks, setTasks] = useState([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  async function loadTasks(){\r\n    await api.get(`/task/filter/${filterActived}/${isConnected}`)\r\n    .then(response => {\r\n      setTasks(response.data);\r\n    })\r\n  }\r\n\r\n\r\n\r\n  function Notificacao(){\r\n    setFilterActived('late');\r\n  }\r\n\r\n  useEffect( () => {\r\n    loadTasks();\r\n    \r\n    if(!isConnected)\r\n    setRedirect(true);\r\n  }, [filterActived])\r\n\r\n\r\n  return (\r\n      <S.Container>\r\n        {redirect && <Redirect to=\"/login/\"/>}\r\n      <Header onClickNotify={Notificacao}/>\r\n      <S.FilterArea>\r\n        <button type=\"button\" onClick={() => setFilterActived(\"all\")}>\r\n        <FilterCard title=\"Todos\" actived={filterActived === 'all'}/>\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"today\")}>\r\n        <FilterCard title=\"Hoje\" actived={filterActived === 'today'}/>\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"week\")}>\r\n        <FilterCard title=\"Semana\" actived={filterActived === 'week'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"month\")}>\r\n        <FilterCard title=\"Mês\" actived={filterActived === 'month'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"year\")}>\r\n        <FilterCard title=\"Ano\" actived={filterActived === 'year'} />\r\n        </button>\r\n\r\n      </S.FilterArea>\r\n\r\n      <S.Title>\r\n        <h3>{filterActived === 'late' ? 'TAREFAS ATRASADAS' : 'TAREFAS'}</h3>\r\n      </S.Title>\r\n      <S.Content>\r\n        {\r\n          tasks.map( t => (\r\n            <Link to={`/task/${t._id}`}>\r\n        <TaskCard type={t.type} title={t.title} when={t.when} done={t.done}/>\r\n        </Link>\r\n          ))\r\n        }\r\n      </S.Content>\r\n      \r\n      <Footer />\r\n      </S.Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\index.js",["106","107","108"],"import React, { useState}  from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport logo from '../../assets/logo.png';\r\nimport api from '../../services/api';\r\nimport Footer from '../../components/Footer';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction Login() {\r\n\r\n    const [login, setLogin] = useState();\r\n    const [senha, setSenha] = useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    async function verifyLogin(){\r\n        await api.get(`/user/search/all`)\r\n        .then(response => {\r\n            var i;\r\n            for (i=0;i<response.data.length;i++){\r\n                if(response.data[i].user==login){\r\n                    if(response.data[i].pass==senha){\r\n                        let id = response.data[i]._id\r\n                        localStorage.setItem('@tamarcado/userid',id);\r\n                        setRedirect(true);\r\n                        window.location.reload();\r\n                    } else {\r\n                        alert('Usuário ou senha incorretos! ');\r\n                    }\r\n                }\r\n            }\r\n            if(!localStorage.getItem('@tamarcado/userid')){\r\n                alert('Usuário não localizado!')\r\n            }\r\n          })\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            \r\n            {redirect && <Redirect to=\"/\"/>}\r\n            <S.Content>\r\n                <img src={logo}/>\r\n                <h1>Entre no aplicativo!</h1>\r\n                <S.ValidationCode>\r\n                    <span>Login</span>\r\n                    <input type=\"text\" onChange={e => setLogin(e.target.value)} value={login}/>\r\n                    <span>Senha</span>\r\n                    <input type=\"password\" onChange={e => setSenha(e.target.value)} value={senha}/>\r\n                    <button type=\"button\" onClick={verifyLogin}>Entrar !</button>\r\n                </S.ValidationCode>\r\n                <Link to={`/cadastro`}>Não tem conta? Cadastre-se !</Link>\r\n            </S.Content>\r\n            <Footer />\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Login;","D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\index.js",["109","110"],"import React, { useState}  from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport logo from '../../assets/logo.png';\r\nimport api from '../../services/api';\r\nimport Footer from '../../components/Footer';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction Cadastro() {\r\n\r\n    const [user, setUser] = useState();\r\n    const [pass, setPass] = useState();\r\n    const [nome, setNome] = useState();\r\n    const [sobrenome, setSobrenome] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n    var flag = false;\r\n\r\n    async function cadastrarUsuario(){\r\n        if(!user) \r\n        return alert(\"Informe o usuário!\")\r\n        else if (!pass)\r\n        return alert(\"Informe a senha!\")\r\n        else if (!nome)\r\n        return alert(\"Informe seu nome!\")\r\n        else if (!sobrenome)\r\n        return alert(\"Informe seu sobrenome!\")\r\n        else if (!email)\r\n        return alert(\"Informe o e-mail!\")\r\n\r\n        await api.get(`/user/search/all`)\r\n        .then(response => {\r\n            var i;\r\n            for (i=0;i<response.data.length;i++){\r\n                if(response.data[i].user==user){\r\n                    flag=true;\r\n                }\r\n            }\r\n          })\r\n\r\n        if(!flag){\r\n        await api.post('/user', {\r\n            user,\r\n            pass,\r\n            nome,\r\n            sobrenome,\r\n            email\r\n        })\r\n        .then( () => {\r\n            alert(\"Cadastro realizado com sucesso! Redirecionando...\")\r\n            setRedirect(true)\r\n        })\r\n        .catch( () =>{\r\n            alert(\"Algo deu errado!\")\r\n        })\r\n    }\r\n        else {\r\n            return alert(\"Usuário já existe!\")\r\n        }}\r\n\r\n    return (\r\n        <S.Container>\r\n            <Link to={`/`}><img src={logo}/></Link>\r\n            \r\n            \r\n            {redirect && <Redirect to=\"/login\"/>}\r\n            <S.Content>\r\n                \r\n                <S.ContainerForm>\r\n                    <span>Nome</span>\r\n                    <input type=\"text\" onChange={e => setNome(e.target.value)} value={nome}/>\r\n                    <span>Sobrenome</span>\r\n                    <input type=\"text\" onChange={e => setSobrenome(e.target.value)} value={sobrenome}/>\r\n                    <span>Usuário</span>\r\n                    <input type=\"text\" onChange={e => setUser(e.target.value)} value={user}/>\r\n                    <span>Senha</span>\r\n                    <input type=\"password\" onChange={e => setPass(e.target.value)} value={pass}/>\r\n                    <span>Email</span>\r\n                    <input type=\"email\" onChange={e => setEmail(e.target.value)} value={email}/>\r\n                    <button type=\"button\" onClick={cadastrarUsuario}>Cadastrar !</button>\r\n                </S.ContainerForm>\r\n\r\n            </S.Content>\r\n            <Footer />\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Cadastro;","D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\index.js",["111","112","113","114","115","116","117"],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\services\\api.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\utils\\typeIcons.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\utils\\isConnected.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\index.js",["118"],"import React from 'react';\r\nimport * as S from './styles';\r\n\r\nimport filter from '../../assets/filter.png';\r\nimport filteractivated from '../../assets/filter-actived.png';\r\n\r\n\r\nfunction FilterCard( {title, actived} ) {\r\n  return (\r\n    <S.Container actived ={actived}>\r\n      <img src={filter} alt='Filtro'></img> \r\n      <span>{title}</span>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default FilterCard;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\index.js",["119","120"],"import React , {useMemo} from 'react';\r\nimport * as S from './styles';\r\nimport {format} from 'date-fns';\r\n\r\nimport typeIcons from '../../utils/typeIcons';\r\n\r\nfunction TaskCard({type, title, when, done}) {\r\n  const date = useMemo(() => format(new Date (when), 'dd/MM/yyyy'));\r\n  const hour = useMemo(() => format(new Date (when), 'HH:mm'));\r\n  return (\r\n    <S.Container done={done}>\r\n        <S.TopCard>\r\n        <img src={typeIcons[type]} alt=\"Ícone da Tarefa\"></img>\r\n        <h3>{title}</h3>\r\n        </S.TopCard>\r\n        <S.BottomCard>\r\n        <strong>{date}</strong>\r\n        <span>{hour}</span>\r\n        </S.BottomCard>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default TaskCard;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\index.js",["121"],"import {React, useEffect, useState }from 'react';\r\nimport * as S from './styles';\r\nimport api from '../../services/api';\r\nimport logo from '../../assets/logo.png';\r\nimport bell from '../../assets/bell.png';\r\nimport { Link } from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\n\r\nfunction Header({onClickNotify}) {\r\n  const [lateCount, setLateCount] = useState();\r\n\r\n  async function lateVerify(){\r\n    await api.get(`/task/filter/late/${isConnected}`)\r\n    .then(response => {\r\n      setLateCount(response.data.length);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    lateVerify()\r\n  })\r\n\r\n  async function logout(){\r\n    localStorage.removeItem('@tamarcado/userid');\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <S.Container>\r\n      <S.LeftSide>\r\n        <Link to=\"/\">\r\n        <img src={logo} alt=\"Logotipo\"/>\r\n        </Link>\r\n      </S.LeftSide>\r\n      <S.RightSide>\r\n        <Link to=\"/\">INÍCIO</Link>\r\n        <span className=\"dividir\"/>\r\n        <Link to=\"/task\">NOVA TAREFA</Link>\r\n        <span className=\"dividir\"/>\r\n        <Link to=\"/profile\">PERFIL</Link>\r\n        <span className=\"dividir\"/>\r\n        <button type='button' onClick={logout}>SAIR</button>\r\n        {\r\n          lateCount!=0 &&\r\n          <>\r\n        <span className=\"dividir\"/>\r\n        <button onClick={onClickNotify} id=\"notification\">\r\n          <img src={bell} alt=\"Notificação\" />\r\n          <span>{lateCount}</span>\r\n          </button>\r\n          </>\r\n          }\r\n      </S.RightSide>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\styles.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":88,"column":6,"nodeType":"128","endLine":88,"endColumn":8,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":34,"column":6,"nodeType":"128","endLine":34,"endColumn":21,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":20,"column":41,"nodeType":"134","messageId":"135","endLine":20,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":21,"column":45,"nodeType":"134","messageId":"135","endLine":21,"endColumn":47},{"ruleId":"136","severity":1,"message":"137","line":42,"column":17,"nodeType":"138","endLine":42,"endColumn":34},{"ruleId":"132","severity":1,"message":"133","line":35,"column":41,"nodeType":"134","messageId":"135","endLine":35,"endColumn":43},{"ruleId":"136","severity":1,"message":"137","line":63,"column":28,"nodeType":"138","endLine":63,"endColumn":45},{"ruleId":"139","severity":1,"message":"140","line":7,"column":9,"nodeType":"141","messageId":"142","endLine":7,"endColumn":13},{"ruleId":"139","severity":1,"message":"143","line":21,"column":10,"nodeType":"141","messageId":"142","endLine":21,"endColumn":21},{"ruleId":"126","severity":1,"message":"144","line":77,"column":6,"nodeType":"128","endLine":77,"endColumn":12,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"133","line":145,"column":18,"nodeType":"134","messageId":"135","endLine":145,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":162,"column":20,"nodeType":"134","messageId":"135","endLine":162,"endColumn":22},{"ruleId":"132","severity":1,"message":"133","line":179,"column":20,"nodeType":"134","messageId":"135","endLine":179,"endColumn":22},{"ruleId":"132","severity":1,"message":"133","line":196,"column":20,"nodeType":"134","messageId":"135","endLine":196,"endColumn":22},{"ruleId":"139","severity":1,"message":"146","line":5,"column":8,"nodeType":"141","messageId":"142","endLine":5,"endColumn":23},{"ruleId":"126","severity":1,"message":"147","line":8,"column":16,"nodeType":"141","endLine":8,"endColumn":23},{"ruleId":"126","severity":1,"message":"147","line":9,"column":16,"nodeType":"141","endLine":9,"endColumn":23},{"ruleId":"132","severity":1,"message":"148","line":44,"column":20,"nodeType":"134","messageId":"135","endLine":44,"endColumn":22},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTaskDetails'. Either include it or remove the dependency array.","ArrayExpression",["151"],"React Hook useEffect has a missing dependency: 'loadTasks'. Either include it or remove the dependency array.",["152"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'updateTasks' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'verifyConquest'. Either include it or remove the dependency array.",["153"],"'filteractivated' is defined but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [loadTaskDetails]",{"range":"160","text":"161"},"Update the dependencies array to be: [filterActived, loadTasks]",{"range":"162","text":"163"},"Update the dependencies array to be: [done, verifyConquest]",{"range":"164","text":"165"},[2400,2402],"[loadTaskDetails]",[943,958],"[filterActived, loadTasks]",[2466,2472],"[done, verifyConquest]"]