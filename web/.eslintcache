[{"D:\\GitHub\\ta-marcado\\web\\src\\index.js":"1","D:\\GitHub\\ta-marcado\\web\\src\\routes\\index.js":"2","D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\index.js":"3","D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\index.js":"4","D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\index.js":"5","D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\index.js":"6","D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\index.js":"7","D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\index.js":"8","D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\styles.js":"9","D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\styles.js":"10","D:\\GitHub\\ta-marcado\\web\\src\\services\\api.js":"11","D:\\GitHub\\ta-marcado\\web\\src\\utils\\isConnected.js":"12","D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\ChartBar.js":"13","D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\Chart.js":"14","D:\\GitHub\\ta-marcado\\web\\src\\utils\\typeIcons.js":"15","D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\styles.js":"16","D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\styles.js":"17","D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\styles.js":"18","D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\styles.js":"19","D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\index.js":"20","D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\index.js":"21","D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\index.js":"22","D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\index.js":"23","D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\styles.js":"24","D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\styles.js":"25","D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\styles.js":"26","D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\styles.js":"27"},{"size":218,"mtime":1610039093146,"results":"28","hashOfConfig":"29"},{"size":998,"mtime":1622987897594,"results":"30","hashOfConfig":"29"},{"size":2054,"mtime":1623110138667,"results":"31","hashOfConfig":"29"},{"size":2409,"mtime":1621048519289,"results":"32","hashOfConfig":"29"},{"size":2906,"mtime":1623110362881,"results":"33","hashOfConfig":"29"},{"size":5745,"mtime":1623802330793,"results":"34","hashOfConfig":"29"},{"size":4362,"mtime":1620175086206,"results":"35","hashOfConfig":"29"},{"size":8103,"mtime":1623110120736,"results":"36","hashOfConfig":"29"},{"size":1749,"mtime":1619142629960,"results":"37","hashOfConfig":"29"},{"size":1004,"mtime":1617543128029,"results":"38","hashOfConfig":"29"},{"size":121,"mtime":1610039093146,"results":"39","hashOfConfig":"29"},{"size":93,"mtime":1618796217865,"results":"40","hashOfConfig":"29"},{"size":328,"mtime":1623628793314,"results":"41","hashOfConfig":"29"},{"size":324,"mtime":1623627206962,"results":"42","hashOfConfig":"29"},{"size":640,"mtime":1610039093146,"results":"43","hashOfConfig":"29"},{"size":4685,"mtime":1623801755949,"results":"44","hashOfConfig":"29"},{"size":2623,"mtime":1617544762914,"results":"45","hashOfConfig":"29"},{"size":1594,"mtime":1619143080153,"results":"46","hashOfConfig":"29"},{"size":3777,"mtime":1621297990981,"results":"47","hashOfConfig":"29"},{"size":339,"mtime":1623110237511,"results":"48","hashOfConfig":"29"},{"size":687,"mtime":1610039093146,"results":"49","hashOfConfig":"29"},{"size":224,"mtime":1623631328567,"results":"50","hashOfConfig":"29"},{"size":1645,"mtime":1623631719529,"results":"51","hashOfConfig":"29"},{"size":612,"mtime":1617544554492,"results":"52","hashOfConfig":"29"},{"size":370,"mtime":1618792340221,"results":"53","hashOfConfig":"29"},{"size":873,"mtime":1617544267047,"results":"54","hashOfConfig":"29"},{"size":1558,"mtime":1623631630971,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bpsrbb",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\GitHub\\ta-marcado\\web\\src\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\routes\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\index.js",["116"],"import React, { useState}  from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport logo from '../../assets/logo.png';\r\nimport api from '../../services/api';\r\nimport Footer from '../../components/Footer';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction Login() {\r\n\r\n    const [login, setLogin] = useState();\r\n    const [senha, setSenha] = useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    async function verifyLogin(){\r\n        await api.get(`/user/search/all`)\r\n        .then(response => {\r\n            var i;\r\n            for (i=0;i<response.data.length;i++){\r\n                if(response.data[i].user===login){\r\n                    if(response.data[i].pass===senha){\r\n                        let id = response.data[i]._id\r\n                        localStorage.setItem('@tamarcado/userid',id);\r\n                        setRedirect(true);\r\n                        window.location.reload();\r\n                    } else {\r\n                        alert('Usuário ou senha incorretos! ');\r\n                    }\r\n                }\r\n            }\r\n            if(!localStorage.getItem('@tamarcado/userid')){\r\n                alert('Usuário não localizado!')\r\n            }\r\n          })\r\n    }\r\n\r\n    return (\r\n        <S.Container>\r\n            \r\n            {redirect && <Redirect to=\"/\"/>}\r\n            <S.Content>\r\n                <img src={logo}/>\r\n                <h1>Entre no aplicativo!</h1>\r\n                <S.ValidationCode>\r\n                    <span>Login</span>\r\n                    <input type=\"text\" onChange={e => setLogin(e.target.value)} value={login}/>\r\n                    <span>Senha</span>\r\n                    <input type=\"password\" onChange={e => setSenha(e.target.value)} value={senha}/>\r\n                    <button type=\"button\" onClick={verifyLogin}>Entrar !</button>\r\n                </S.ValidationCode>\r\n                <Link to={`/cadastro`}>Não tem conta? Cadastre-se !</Link>\r\n            </S.Content>\r\n            <Footer />\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default Login;","D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\index.js",["117"],"import React, { useState, useEffect} from 'react';\r\nimport api from '../../services/api';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport FilterCard from '../../components/FilterCard';\r\nimport TaskCard from '../../components/TaskCard';\r\nimport * as S from './styles';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\n\r\nfunction Home() {\r\n  const [filterActived, setFilterActived] = useState('today');\r\n  const [tasks, setTasks] = useState([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  async function loadTasks(){\r\n    await api.get(`/task/filter/${filterActived}/${isConnected}`)\r\n    .then(response => {\r\n      setTasks(response.data);\r\n    })\r\n  }\r\n\r\n\r\n\r\n  function Notificacao(){\r\n    setFilterActived('late');\r\n  }\r\n\r\n  useEffect( () => {\r\n    loadTasks();\r\n    \r\n    if(!isConnected)\r\n    setRedirect(true);\r\n  }, [filterActived])\r\n\r\n\r\n  return (\r\n      <S.Container>\r\n        {redirect && <Redirect to=\"/login/\"/>}\r\n      <Header onClickNotify={Notificacao}/>\r\n      <S.FilterArea>\r\n        <button type=\"button\" onClick={() => setFilterActived(\"all\")}>\r\n        <FilterCard title=\"Todos\" actived={filterActived === 'all'}/>\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"today\")}>\r\n        <FilterCard title=\"Hoje\" actived={filterActived === 'today'}/>\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"week\")}>\r\n        <FilterCard title=\"Semana\" actived={filterActived === 'week'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"month\")}>\r\n        <FilterCard title=\"Mês\" actived={filterActived === 'month'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => setFilterActived(\"year\")}>\r\n        <FilterCard title=\"Ano\" actived={filterActived === 'year'} />\r\n        </button>\r\n\r\n      </S.FilterArea>\r\n\r\n      <S.Title>\r\n        <h3>{filterActived === 'late' ? 'TAREFAS ATRASADAS' : 'TAREFAS'}</h3>\r\n      </S.Title>\r\n      <S.Content>\r\n        {\r\n          tasks.map( t => (\r\n            <Link to={`/task/${t._id}`}>\r\n        <TaskCard type={t.type} title={t.title} when={t.when} done={t.done}/>\r\n        </Link>\r\n          ))\r\n        }\r\n      </S.Content>\r\n      \r\n      <Footer />\r\n      </S.Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\index.js",["118","119","120"],"import React, { useState, useEffect} from 'react';\r\nimport api from '../../services/api';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport * as S from './styles';\r\nimport {Redirect} from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\nimport LoadingMask from \"react-loadingmask\";\r\nimport \"react-loadingmask/dist/react-loadingmask.css\";\r\nimport Chart from './Chart';\r\nimport ChartBar from './ChartBar'\r\n\r\nfunction Dashboard() {\r\n  const [updateTasks, setUpdateTasks] = useState('today');\r\n  const [typeTasks, setTypeTasks] = useState(0);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [done, setDone] = useState([]);\r\n  const [bargraph, setBarGraph] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [chart, setChart] = useState({});\r\n  const [bar, setBar] = useState({});\r\n  const [labelLine, setLabelLine] = useState([]);\r\n  const [countarray, setCountarray] = useState([]);\r\n\r\n  async function loadStatus(){\r\n    await api.get(`/task/filter/countdone/${isConnected}`)\r\n    .then(response => {\r\n      setDone(response.data);\r\n    })\r\n    setLoading(false);\r\n  }\r\n\r\n  async function loadTasks(){\r\n    await api.get(`/task/dashresults/${isConnected}/${typeTasks}`)\r\n    .then(response => {\r\n      setTasks(response.data);\r\n      generateArray(response.data);\r\n      setChart({\r\n        labels: labelLine,\r\n        datasets: [\r\n          {\r\n            label: \"Tarefas\",\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: \"rgba(75,192,192,0.4)\",\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n            borderCapStyle: \"butt\",\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: \"miter\",\r\n            pointBorderColor: \"rgba(75,192,192,1)\",\r\n            pointBackgroundColor: \"#fff\",\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            scaleStartValue : 0 ,\r\n            data: countarray\r\n          }\r\n        ]\r\n      });\r\n    })\r\n  }\r\n\r\n  function Notificacao(){\r\n    setUpdateTasks('late');\r\n  }\r\n\r\n  function loadGraphs(){\r\n    var array = \r\n    [done[\"padrao\"],\r\n    done[\"esportes\"],\r\n    done[\"alimentacao\"],\r\n    done[\"trabalho\"],\r\n    done[\"social\"],\r\n    done[\"estudos\"],\r\n    done[\"shopping\"],\r\n    done[\"viagens\"],\r\n    done[\"academia\"],\r\n    done[\"total\"]\r\n  ]\r\n    setBarGraph(array);\r\n    setBar({\r\n        labels: ['Padrão', 'Esportes', 'Alimentação', 'Trabalho', 'Social', 'Estudos', 'Compras','Viagens','Academia', 'Total'],\r\n        datasets: [{\r\n            label: 'Tarefas',\r\n            data: bargraph,\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(153, 102, 255, 0.2)',\r\n                'rgba(255, 159, 64, 0.2)'\r\n            ],\r\n            borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)'\r\n            ],\r\n            borderWidth: 1\r\n        }]\r\n    })\r\n  }\r\n\r\n  function generateArray(data){\r\n    var labels = \r\n    [data[\"0\"].day,\r\n    data[\"1\"].day,\r\n    data[\"2\"].day,\r\n    data[\"3\"].day,\r\n    data[\"4\"].day,\r\n    data[\"5\"].day,\r\n    data[\"6\"].day,\r\n  ]\r\n  setLabelLine(labels);\r\n  var contadores = \r\n    [data[\"0\"].count,\r\n    data[\"1\"].count,\r\n    data[\"2\"].count,\r\n    data[\"3\"].count,\r\n    data[\"4\"].count,\r\n    data[\"5\"].count,\r\n    data[\"6\"].count,\r\n  ]\r\n    setCountarray(contadores);\r\n  }\r\n\r\n  function trocarTipo(e){\r\n    setTypeTasks(e.target.value);\r\n    setLoading(true);\r\n  }\r\n\r\n  \r\n  useEffect( () => {\r\n    loadTasks();\r\n    loadStatus();\r\n    loadGraphs();\r\n\r\n    if(!isConnected)\r\n    setRedirect(true);\r\n  }, [loading])\r\n\r\n  return (\r\n    \r\n    <S.Container>\r\n      {redirect && <Redirect to=\"/login/\"/>}\r\n      <Header onClickNotify={Notificacao}/>\r\n      <LoadingMask loading={loading} text={\"Carregando...\"}>\r\n        \r\n        <S.Content>\r\n          \r\n          <S.LeftSide>\r\n            <div>\r\n            <S.Title>\r\n            <h3>Atividades Semanais por Tipo</h3>\r\n            <S.Span>Tipo de tarefa:</S.Span>\r\n            <S.Select value={typeTasks} onChange={trocarTipo}>\r\n              <option value={0}> </option>\r\n              <option value={1}>Tarefa Padrão</option>\r\n              <option value={2}>Esportes</option>\r\n              <option value={3}>Alimentação</option>\r\n              <option value={4}>Trabalho</option>\r\n              <option value={5}>Social</option>\r\n              <option value={6}>Estudos</option>\r\n              <option value={7}>Compras</option>\r\n              <option value={8}>Viagens</option>\r\n              <option value={9}>Academia</option>\r\n            </S.Select>\r\n          </S.Title>\r\n            </div>\r\n        <Chart data={chart}/>\r\n          </S.LeftSide>\r\n          <S.RightSide>\r\n          <div>\r\n            <S.Title2>\r\n            <h3>Atividades Realizadas</h3>\r\n          <S.Span>     </S.Span>\r\n              \r\n            </S.Title2>\r\n            </div>\r\n            <ChartBar data={bar}/>\r\n          </S.RightSide>\r\n        </S.Content>\r\n      </LoadingMask>\r\n      <Footer />\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\index.js",["121"],"import React, { useState, useEffect} from 'react';\r\nimport api from '../../services/api';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport TypeIcons from '../../utils/typeIcons';\r\nimport {format} from 'date-fns';\r\nimport {Redirect} from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\nimport * as S from './styles';\r\n\r\nfunction Task({match}) {\r\n  const [redirect, setRedirect] = useState(false)\r\n  const [type, setType] = useState();\r\n  const [title, setTitle] = useState();\r\n  const [done, setDone] = useState(false);\r\n  const [description, setDescription] = useState();\r\n  const [date, setDate] = useState();\r\n  const [hour, setHour] = useState();\r\n\r\n\r\n\r\n  async function loadTaskDetails(){\r\n    await api.get(`/task/${match.params.id}`)\r\n    .then(response => {\r\n      setType(response.data.type)\r\n      setDone(response.data.done)\r\n      setTitle(response.data.title)\r\n      setDescription(response.data.description)\r\n      setDate(format (new Date (response.data.when), 'yyyy-MM-dd'))\r\n      setHour(format (new Date (response.data.when), 'HH:mm'))\r\n    })\r\n  }\r\n\r\n  async function save(){\r\n    //Validação\r\n    if (!title)\r\n      return alert(\"Informe o título da tarefa\")\r\n    else if(!description)\r\n      return alert(\"Informe a descrição da tarefa\")\r\n    else if(!type)\r\n      return alert(\"Informe o tipo da tarefa\")\r\n    else if(!date)\r\n      return alert(\"Informe a data da tarefa\")\r\n    else if(!hour)\r\n      return alert(\"Informe a hora da tarefa\")\r\n\r\n\r\n\r\n    if(match.params.id){\r\n      await api.put(`/task/${match.params.id}`, {\r\n        userid: isConnected,\r\n        done,\r\n        type,\r\n        title,\r\n        description,\r\n        when: `${date}T${hour}:00.000`\r\n      })\r\n      .then( () =>\r\n        setRedirect(true)\r\n        )\r\n    } else {\r\n    await api.post('/task', {\r\n      userid: isConnected,\r\n      type,\r\n      title,\r\n      description,\r\n      when: `${date}T${hour}:00.000`\r\n    })\r\n    .then( () =>\r\n      setRedirect(true)\r\n      )\r\n    }\r\n  }\r\n\r\n    async function remove() {\r\n      const res = window.confirm(\"Deseja remover a tarefa?\")\r\n      if( res === true){\r\n        await api.delete(`/task/${match.params.id}`)\r\n        .then(() =>\r\n        setRedirect(true))\r\n      }\r\n    }\r\n\r\n  useEffect( () => {\r\n    if(!isConnected)\r\n    setRedirect(true);\r\n    loadTaskDetails();\r\n  }, [])\r\n\r\n\r\n  return (\r\n      <S.Container>\r\n        {redirect && <Redirect to=\"/\" />}\r\n      <Header />\r\n\r\n      <S.Form>\r\n          <S.TypeIcons>\r\n            {\r\n                TypeIcons.map((icon, index) => (\r\n                    index > 0 && \r\n                    <button type=\"button\" onClick={()=> setType(index)}>\r\n                    <img src={icon} alt=\" Tipo da Tarefa\"\r\n                    className={type && type !== index && 'inative'}/>\r\n                    </button>\r\n                ))\r\n            }\r\n          </S.TypeIcons>\r\n          <S.Input>\r\n              <span>Título</span>\r\n              <input type=\"text\" placeholder=\"Título da tarefa\" \r\n              onChange={e => setTitle(e.target.value)} value={title}/>\r\n          </S.Input>\r\n\r\n          <S.TextArea>\r\n              <span>Descrição</span>\r\n              <textarea rows={5} placeholder=\"Detalhes da tarefa\"\r\n              onChange={e => setDescription(e.target.value)} value={description}/>\r\n              \r\n          </S.TextArea>\r\n\r\n          <S.Input>\r\n              <span>Data</span>\r\n              <input type=\"date\" placeholder=\"Data\"\r\n              onChange={e => setDate(e.target.value)} value={date}/>\r\n              \r\n          </S.Input>\r\n\r\n          <S.Input>\r\n              <span>Hora</span>\r\n              <input type=\"time\" placeholder=\"Hora\"\r\n              onChange={e => setHour(e.target.value)} value={hour}/>\r\n          </S.Input>\r\n\r\n          <S.Options>\r\n              <div>\r\n                <input type=\"checkbox\" checked={done} onChange={() => setDone(!done)}/>\r\n                <span>CONCLUÍDO</span>\r\n              </div>\r\n\r\n              {match.params.id && <button type=\"button\" onClick={remove}>EXCLUIR</button>}\r\n          </S.Options>\r\n\r\n          <S.Save>\r\n              <button type='button' onClick={save}  >SALVAR</button>\r\n          </S.Save>\r\n      </S.Form>\r\n\r\n      <Footer />\r\n      </S.Container>\r\n    );\r\n}\r\n\r\nexport default Task;","D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\index.js",["122","123"],"import React, { useState, useEffect} from 'react';\r\nimport api from '../../services/api';\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport usericon from '../../assets/Unknown_person.jpg';\r\nimport * as S from './styles';\r\nimport { Redirect} from 'react-router-dom';\r\nimport isConnected from '../../utils/isConnected';\r\nimport LoadingMask from \"react-loadingmask\";\r\nimport \"react-loadingmask/dist/react-loadingmask.css\";\r\nimport imgconq1off from \"../../assets/aprendizoff.png\";\r\nimport imgconq1 from \"../../assets/aprendiz.png\";\r\nimport imgconq2off from \"../../assets/mestreoff.png\";\r\nimport imgconq2 from \"../../assets/mestre.png\";\r\nimport imgconq3off from \"../../assets/anciaooff.png\";\r\nimport imgconq3 from \"../../assets/anciao.png\";\r\nimport imgconq4off from \"../../assets/esportesoff.png\";\r\nimport imgconq4 from \"../../assets/esportes.png\";\r\n\r\nfunction Profile() {\r\n  const [updateTasks, setUpdateTasks] = useState('today');\r\n  const [username, setUsername] = useState('username');\r\n  const [done, setDone] = useState([]);\r\n  const [undone, setUndone]= useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [conq1, setConq1] = useState(false);\r\n  const [conq2, setConq2] = useState(false);\r\n  const [conq3, setConq3] = useState(false);\r\n  const [conq4, setConq4] = useState(false);\r\n\r\n  async function loadStatus(){\r\n    await api.get(`/user/${isConnected}`)\r\n    .then(response => {\r\n      setUsername(response.data.nome+\" \"+response.data.sobrenome)\r\n    })\r\n    await api.get(`/task/filter/countdone/${isConnected}`)\r\n    .then(response => {\r\n      setDone(response.data);\r\n    })\r\n    await api.get(`/task/filter/countundone/${isConnected}`)\r\n    .then(response => {\r\n      setUndone(response.data);\r\n    })\r\n    setLoading(false);\r\n  }\r\n\r\n  function Notificacao(){\r\n    setUpdateTasks('late');\r\n  }\r\n\r\n  function verifyConquest(){\r\n    if(done[\"total\"]>=5){\r\n      setConq1(true)\r\n      setConq2(true)\r\n      setConq3(true)\r\n    } else if(done[\"total\"]>=3){\r\n      setConq1(true)\r\n      setConq2(true)\r\n    } else if(done[\"total\"]>0)\r\n    setConq1(true)\r\n    \r\n    if(done[\"esportes\"]>=3)\r\n    setConq4(true)\r\n  }\r\n  \r\n  useEffect( () => {\r\n    //Carregar tarefas\r\n    loadStatus();\r\n    //Verificar conquistas\r\n    verifyConquest();\r\n    //Função do header\r\n    Notificacao();\r\n\r\n    if(!isConnected)\r\n    setRedirect(true);\r\n  }, [done])\r\n\r\n\r\n  return (\r\n      <S.Container>\r\n        {redirect && <Redirect to=\"/login/\"/>}\r\n      <Header onClickNotify={Notificacao}/>\r\n      <LoadingMask loading={loading} text={\"Carregando...\"}>\r\n      <S.Content>\r\n      \r\n        <S.LeftSide>\r\n          <S.Title>\r\n            <h3>PERFIL</h3>\r\n          </S.Title>\r\n          <S.Image>\r\n            <img src={usericon} alt=\"Usuario\"></img>\r\n          </S.Image>\r\n          <S.Subtitle>\r\n            <h4>{username}</h4>\r\n          </S.Subtitle>\r\n            <S.ContentTasks>\r\n            <S.LeftSideTasks>\r\n            <span>Tarefas concluidas: {done[\"total\"]}</span>\r\n            <S.TasksDiv>\r\n              <S.TasksDivTitle>\r\n                <S.Span>Tipos:</S.Span>\r\n            </S.TasksDivTitle>\r\n                <S.Span>Tarefas padrão: {done[\"padrao\"]}</S.Span>\r\n                <S.Span>Esportes: {done[\"esportes\"]}</S.Span>\r\n                <S.Span>Alimentação: {done[\"alimentacao\"]}</S.Span>\r\n                <S.Span>Trabalho: {done[\"trabalho\"]}</S.Span>\r\n                <S.Span>Social: {done[\"social\"]}</S.Span>\r\n                <S.Span>Estudos: {done[\"estudos\"]}</S.Span>\r\n                <S.Span>Compras: {done[\"shopping\"]}</S.Span>\r\n                <S.Span>Viagens: {done[\"viagens\"]}</S.Span>\r\n                <S.Span>Academia: {done[\"academia\"]}</S.Span>\r\n            </S.TasksDiv> \r\n            </S.LeftSideTasks>\r\n            <S.RightSideTasks>\r\n            <span type=\"tipos\">Tarefas não concluidas: {undone[\"total\"]}</span>\r\n            <S.TasksDiv>\r\n              <S.TasksDivTitle>\r\n                <S.Span class=\"tipos\">Tipos:</S.Span>\r\n            </S.TasksDivTitle>\r\n                <S.Span>Tarefas padrão: {undone[\"padrao\"]}</S.Span>\r\n                <S.Span>Esportes: {undone[\"esportes\"]}</S.Span>\r\n                <S.Span>Alimentação: {undone[\"alimentacao\"]}</S.Span>\r\n                <S.Span>Trabalho: {undone[\"trabalho\"]}</S.Span>\r\n                <S.Span>Social: {undone[\"social\"]}</S.Span>\r\n                <S.Span>Estudos: {undone[\"estudos\"]}</S.Span>\r\n                <S.Span>Compras: {undone[\"shopping\"]}</S.Span>\r\n                <S.Span>Viagens: {undone[\"viagens\"]}</S.Span>\r\n                <S.Span>Academia: {undone[\"academia\"]}</S.Span>\r\n            </S.TasksDiv> \r\n            </S.RightSideTasks>\r\n          </S.ContentTasks>\r\n        </S.LeftSide>\r\n\r\n        <S.RightSide>\r\n          <S.Title>\r\n            <h3>CONQUISTAS</h3>\r\n          </S.Title>\r\n          {\r\n            loading ?\r\n            <>\r\n            </>\r\n            :\r\n            <S.Container>\r\n          { conq1===true ?            \r\n            <S.ConquestDiv>\r\n              <img src={imgconq1} alt=\"conquista1\"/>\r\n              <S.SpanConq>Aprendiz da Agenda</S.SpanConq>\r\n              <S.DivRightConq>\r\n              <S.SpanConqRight>Concluiu 1 tarefa de qualquer tipo</S.SpanConqRight>\r\n              </S.DivRightConq>\r\n            </S.ConquestDiv>\r\n            :\r\n            <S.ConquestDivOff>\r\n              <img src={imgconq1off} alt=\"conquista1bloq\"/>\r\n              <S.SpanConqOff>Aprendiz da Agenda</S.SpanConqOff>\r\n              <S.DivRightConq>\r\n              <S.SpanConqRightOff>Concluiu 1 tarefa de qualquer tipo</S.SpanConqRightOff>\r\n              </S.DivRightConq>\r\n            </S.ConquestDivOff>\r\n            }\r\n            { conq2===true ?            \r\n            <S.ConquestDiv>\r\n            <img src={imgconq2} alt=\"conquista2\"/>\r\n            <S.SpanConq>Mestre da Agenda</S.SpanConq>\r\n            <S.DivRightConq>\r\n            <S.SpanConqRight>Concluiu 3 tarefas de qualquer tipo</S.SpanConqRight>\r\n            </S.DivRightConq>\r\n          </S.ConquestDiv>\r\n          :\r\n          <S.ConquestDivOff>\r\n            <img src={imgconq2off} alt=\"conquista2bloq\"/>\r\n            <S.SpanConqOff>Mestre da Agenda</S.SpanConqOff>\r\n            <S.DivRightConq>\r\n            <S.SpanConqRightOff>Concluiu 3 tarefas de qualquer tipo</S.SpanConqRightOff>\r\n            </S.DivRightConq>\r\n          </S.ConquestDivOff>\r\n            }\r\n            { conq3===true ?            \r\n            <S.ConquestDiv>\r\n            <img src={imgconq3} alt=\"conquista3\"/>\r\n            <S.SpanConq>Ancião da Agenda</S.SpanConq>\r\n            <S.DivRightConq>\r\n            <S.SpanConqRight>Concluiu 5 tarefas de qualquer tipo</S.SpanConqRight>\r\n            </S.DivRightConq>\r\n          </S.ConquestDiv>\r\n          :\r\n          <S.ConquestDivOff>\r\n            <img src={imgconq3off} alt=\"conquista3bloq\"/>\r\n            <S.SpanConqOff>Ancião da Agenda</S.SpanConqOff>\r\n            <S.DivRightConq>\r\n            <S.SpanConqRightOff>Concluiu 5 tarefas de qualquer tipo</S.SpanConqRightOff>\r\n            </S.DivRightConq>\r\n          </S.ConquestDivOff>\r\n            }\r\n            { conq4===true ?            \r\n            <S.ConquestDiv>\r\n            <img src={imgconq4} alt=\"conquista4\"/>\r\n            <S.SpanConq>Amante dos Esportes</S.SpanConq>\r\n            <S.DivRightConq>\r\n            <S.SpanConqRight>Concluiu 3 tarefas do tipo \"Esportes\"</S.SpanConqRight>\r\n            </S.DivRightConq>\r\n          </S.ConquestDiv>\r\n          :\r\n          <S.ConquestDivOff>\r\n            <img src={imgconq4off} alt=\"conquista4bloq\"/>\r\n            <S.SpanConqOff>Amante dos Esportes</S.SpanConqOff>\r\n            <S.DivRightConq>\r\n            <S.SpanConqRightOff>Concluiu 3 tarefas do tipo \"Esportes\"</S.SpanConqRightOff>\r\n            </S.DivRightConq>\r\n          </S.ConquestDivOff>\r\n            }\r\n            </S.Container>\r\n            }\r\n        </S.RightSide>\r\n      </S.Content>\r\n      </LoadingMask>\r\n      <Footer />\r\n      \r\n      </S.Container>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\views\\Login\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Home\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\services\\api.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\utils\\isConnected.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\ChartBar.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\Chart.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\utils\\typeIcons.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Dashboard\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Task\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Cadastro\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\views\\Profile\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\index.js",["124","125"],"import React , {useMemo} from 'react';\r\nimport * as S from './styles';\r\nimport {format} from 'date-fns';\r\n\r\nimport typeIcons from '../../utils/typeIcons';\r\n\r\nfunction TaskCard({type, title, when, done}) {\r\n  const date = useMemo(() => format(new Date (when), 'dd/MM/yyyy'));\r\n  const hour = useMemo(() => format(new Date (when), 'HH:mm'));\r\n  return (\r\n    <S.Container done={done}>\r\n        <S.TopCard>\r\n        <img src={typeIcons[type]} alt=\"Ícone da Tarefa\"></img>\r\n        <h3>{title}</h3>\r\n        </S.TopCard>\r\n        <S.BottomCard>\r\n        <strong>{date}</strong>\r\n        <span>{hour}</span>\r\n        </S.BottomCard>\r\n    </S.Container>\r\n  );\r\n}\r\n\r\nexport default TaskCard;\r\n","D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\index.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\FilterCard\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\Footer\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\TaskCard\\styles.js",[],"D:\\GitHub\\ta-marcado\\web\\src\\components\\Header\\styles.js",[],{"ruleId":"126","severity":1,"message":"127","line":42,"column":17,"nodeType":"128","endLine":42,"endColumn":34},{"ruleId":"129","severity":1,"message":"130","line":34,"column":6,"nodeType":"131","endLine":34,"endColumn":21,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":14,"column":10,"nodeType":"135","messageId":"136","endLine":14,"endColumn":21},{"ruleId":"133","severity":1,"message":"137","line":16,"column":10,"nodeType":"135","messageId":"136","endLine":16,"endColumn":15},{"ruleId":"129","severity":1,"message":"138","line":149,"column":6,"nodeType":"131","endLine":149,"endColumn":15,"suggestions":"139"},{"ruleId":"129","severity":1,"message":"140","line":88,"column":6,"nodeType":"131","endLine":88,"endColumn":8,"suggestions":"141"},{"ruleId":"133","severity":1,"message":"134","line":21,"column":10,"nodeType":"135","messageId":"136","endLine":21,"endColumn":21},{"ruleId":"129","severity":1,"message":"142","line":77,"column":6,"nodeType":"131","endLine":77,"endColumn":12,"suggestions":"143"},{"ruleId":"129","severity":1,"message":"144","line":8,"column":16,"nodeType":"135","endLine":8,"endColumn":23},{"ruleId":"129","severity":1,"message":"144","line":9,"column":16,"nodeType":"135","endLine":9,"endColumn":23},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTasks'. Either include it or remove the dependency array.","ArrayExpression",["145"],"no-unused-vars","'updateTasks' is assigned a value but never used.","Identifier","unusedVar","'tasks' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadGraphs' and 'loadTasks'. Either include them or remove the dependency array.",["146"],"React Hook useEffect has a missing dependency: 'loadTaskDetails'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'verifyConquest'. Either include it or remove the dependency array.",["148"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [filterActived, loadTasks]",{"range":"157","text":"158"},"Update the dependencies array to be: [loadGraphs, loadTasks, loading]",{"range":"159","text":"160"},"Update the dependencies array to be: [loadTaskDetails]",{"range":"161","text":"162"},"Update the dependencies array to be: [done, verifyConquest]",{"range":"163","text":"164"},[943,958],"[filterActived, loadTasks]",[4251,4260],"[loadGraphs, loadTasks, loading]",[2400,2402],"[loadTaskDetails]",[2461,2467],"[done, verifyConquest]"]